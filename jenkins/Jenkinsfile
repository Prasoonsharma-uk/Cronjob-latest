pipeline {
    agent any
    
    parameters {
        string(name: 'VERSION', defaultValue: 'latest', description: 'Docker image version')
    }
    
    environment {
        REGISTRY = 'prasoonshrama25'
        IMAGE = 'cronjob-app'
        TAG = "${params.VERSION}"
        DOCKER_CREDENTIALS_ID = 'docker-credentials-id'
        KUBE_CONFIG = credentials('kubeconfig')
    }
    
    stages {
        stage('Install Helm') {
            steps {
                script {
                    bat '''
                        echo Installing Helm...
                        curl -fsSL -o get_helm.bat https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
                        chmod 700 get_helm.bat
                        get_helm.bat
                        del get_helm.bat
                        helm version
                    '''
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    bat "docker build -t ${REGISTRY}/${IMAGE}:${params.VERSION} -f Dockerfile ."
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        bat "docker push ${REGISTRY}/${IMAGE}:${params.VERSION}"
                    }
                }
            }
        }

        stage('Cleanup Existing Release and Namespace') {
            steps {
                script {
                    withKubeConfig([credentialsId: 'kubeconfig']) {
                        bat '''
                            echo Cleaning up existing releases...
                            helm uninstall cronjob-v2 --namespace cronjob-v2 || echo "No release to uninstall"
                            kubectl delete namespace cronjob-v2 --ignore-not-found=true
                        '''
                    }
                }
            }
        }
        
        stage('Manage Namespace') {
            steps {
                script {
                    withKubeConfig([credentialsId: 'kubeconfig']) {
                        bat '''
                            echo Managing namespace...
                            kubectl get namespace cronjob-v1 || kubectl create namespace cronjob-v1
                        '''
                    }
                }
            }
        }
        
        stage('Deploy CronJob v1') {
            steps {
                script {
                    withKubeConfig([credentialsId: 'kubeconfig']) {
                        bat '''
                            echo Deploying CronJob v1...
                            helm upgrade --install cronjob-v1 ./helm/cronjob-multi-version --namespace cronjob-v1 --values ./helm/cronjob-multi-version/values-v1.yaml
                        '''
                    }
                }
            }
        }
        
        stage('Deploy CronJob v2') {
            steps {
                script {
                    withKubeConfig([credentialsId: 'kubeconfig']) {
                        bat '''
                            echo Deploying CronJob v2...
                            helm upgrade --install cronjob-v2 ./helm/cronjob-multi-version --namespace cronjob-v2 --values ./helm/cronjob-multi-version/values-v2.yaml
                        '''
                    }
                }
            }
        }
    }
}
